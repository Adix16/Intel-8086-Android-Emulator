{
  "InstructionList": [
    {
      "Instruction": "ADD",
      "Syntax": "ADD destination,source",
      "Description": "Equivalent to destination=source+destination",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry", "Overflow", "Auxiliary","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"ADD AX,CX"},
        {"Type":"Register-Memory","Specimen":"ADD [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"ADD AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"ADD [BX],10010B"}
      ]
    },
    {
      "Instruction": "AND",
      "Syntax": "AND destination,source",
      "Description": "Equivalent to destination=source & destination (‘&’ is bitwise AND operation)",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Auxiliary (undefined)","Carry=(false)", "Overflow=(false)","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"AND AX,CX"},
        {"Type":"Register-Memory","Specimen":"AND [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"AND AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"AND [BX],10010B"}
      ]
    },
    {
      "Instruction": "MUL",
      "Syntax": "MUL multiplier",
      "Description": "This is unsigned multiplication if multiplier is a byte then AX=AL x multiplier but if multiplier is a double-byte then  product=AX x multiplier where AX=lower part of product DX=higher part of product",
      "Source": ["Register","Memory"],
      "Destination": ["AX","DX"],
      "FlagsChanged": ["Carry", "Overflow"],
      "Examples": [
        {"Type":"Register","Specimen":"MUL BX"},
        {"Type":"Memory","Specimen":"MUL [F807H]"}
      ]
    },
    {
      "Instruction": "DIV",
      "Syntax": "DIV divider",
      "Description": "if divisor is a byte then AL=floor(AX/divisor) AH=remainder but if divisor is a double-byte then  AX=floor( ( DX*255 + AX)/divisor ) DX=remainder",
      "Source": ["Register","Memory"],
      "Destination": ["AX","DX"],
      "FlagsChanged": ["All flags are undefined"],
      "Examples": [
        {"Type":"Register","Specimen":"DIV BX"},
        {"Type":"Memory","Specimen":"DIV [F807H]"}
      ]
    },
    {
      "Instruction": "CMP",
      "Syntax": "CMP destination,source",
      "Description": "Similar to SUB destination,source however, the destination is not changed rather only the flags are updated",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry", "Overflow", "Auxiliary", "Parity", "Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"CMP AX,CX"},
        {"Type":"Register-Memory","Specimen":"CMP [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"CMP AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"CMP [BX],10010B"}
      ]
    },
    {
      "Instruction": "OR",
      "Syntax": "OR destination,source",
      "Description": "Equivalent to destination=source | destination (‘|’ is bitwise OR operation)",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Auxiliary (undefined)","Carry=(false)", "Overflow=(false)","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"OR AX,CX"},
        {"Type":"Register-Memory","Specimen":"OR [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"OR AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"OR [BX],10010B"}
      ]
    },
    {
      "Instruction": "SUB",
      "Syntax": "SUB destination,source",
      "Description": "Equivalent to destination=destination-source",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry", "Overflow", "Auxiliary", "Parity", "Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"SUB AX,CX"},
        {"Type":"Register-Memory","Specimen":"SUB [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"SUB AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"SUB [BX],10010B"}
      ]
    },
    {
      "Instruction": "TEST",
      "Syntax": "TEST destination,source",
      "Description": "Similar to AND destination,source however the destination is not updated but rather only the flags are updated",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Auxiliary (undefined)","Carry=(false)", "Overflow=(false)","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"TEST AX,CX"},
        {"Type":"Register-Memory","Specimen":"TEST [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"TEST AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"TEST [BX],10010B"}
      ]
    },
    {
      "Instruction": "XOR",
      "Syntax": "XOR destination,source",
      "Description": "Equivalent to destination=source ^ destination (‘^’ indicates bitwise XOR operation)",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Auxiliary (undefined)","Carry=(false)", "Overflow=(false)","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register-Register","Specimen":"XOR AX,CX"},
        {"Type":"Register-Memory","Specimen":"XOR [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"XOR AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"XOR [BX],10010B"}
      ]
    },
    {
      "Instruction": "CLC",
      "Syntax": "CLC ; no operands",
      "Description": "Clears the Carry flag to 0 (false)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Carry"],
      "Examples": [
        {"Type": "None","Specimen":"CLC ; clears carry flag to false"}
      ]
    },
    {
      "Instruction": "CLD",
      "Syntax": "CLD ; no operands",
      "Description": "Clears the Direction flag to 0 (false)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Direction"],
      "Examples": [
        {"Type": "None","Specimen":"CLD ; clears direction flag to false"}
      ]
    },
    {
      "Instruction": "CLI",
      "Syntax": "CLI ; no operands",
      "Description": "Clears the Interrupt flag to 0 (false)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Interrupt"],
      "Examples": [
        {"Type": "None","Specimen":"CLI ; clears interrupt flag to false"}
      ]
    },
    {
      "Instruction": "CMC",
      "Syntax": "CMC ; no operands",
      "Description": "CompleMents the Carry flag Equivalent to carry flag = ~carry flag (where ~ is bit inversion operator)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Carry"],
      "Examples": [
        {"Type": "None","Specimen":"CMC ; inverts the carry flag"}
      ]
    },
    {
      "Instruction": "DEC",
      "Syntax": "DEC destination",
      "Description": "destination = destination - 1 (substracts one from destination)",
      "Source": [],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry (undefined)", "Overflow", "Auxiliary","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register","Specimen":"DEC DX"},
        {"Type":"Memory","Specimen":"DEC [F257H]"}
      ]
    },
    {
      "Instruction": "INC",
      "Syntax": "INC destination",
      "Description": "destination = destination + 1 (adds one to destination)",
      "Source": [],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry (undefined)", "Overflow", "Auxiliary","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register","Specimen":"INC AX"},
        {"Type":"Memory","Specimen":"INC [F807H]"}
      ]
    },
    {
      "Instruction": "HLT",
      "Syntax": "HLT ; no operands",
      "Description": "Halts the execution and no further instructions are execution",
      "Source": [],
      "Destination": [],
      "FlagsChanged": [],
      "Examples": [
        {"Type": "None","Specimen":"HLT ; stops execution by the permission of Allah"}
      ]
    },
    {
      "Instruction": "INT",
      "Syntax": "INT interrupt-number",
      "Description": "Used to invoke interrupt handler identified by interrupt-number",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Interrupt","Trap"],
      "Examples": [
        {"Type": "None","Specimen":"INT 21H"}
      ]
    },
    {
      "Instruction": "JA or JNBE",
      "Syntax": "JA label or JNBE label",
      "Description": "(Unsigned comparison) Jump if Above or Jump if not below nor equal",
      "Source": [],
      "Destination": [],
      "FlagsChanged": [],
      "Examples": [
        {"Type":"None","Specimen":"CMP AX,BX \n JA label2"}
      ]
    },
    {
      "Instruction": "MOV",
      "Syntax": "MOV destination,source",
      "Description": "Moves a byte or double-byte from the source to the destination",
      "Source": ["Register","Memory","Immediate value"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": [],
      "Examples": [
        {"Type":"Register-Register","Specimen":"MOV AX,CX"},
        {"Type":"Register-Memory","Specimen":"MOV [F034H],DX"},
        {"Type":"Register-Immediate Value","Specimen":"MOV AX,33"},
        {"Type":"Memory-Immediate Value","Specimen":"MOV [BX],10010B"}
      ]
    },
    {
      "Instruction": "NEG",
      "Syntax": "NEG destination",
      "Description": "Equivalent to destination = - destination (negative value of destination) i.e. it is equivalent to doing a bitwise NOT operation, then adding one - finding the 2’s complement of the destination",
      "Source": [],
      "Destination": ["Register","Memory"],
      "FlagsChanged": ["Carry", "Overflow", "Auxiliary","Parity","Zero","Sign"],
      "Examples": [
        {"Type":"Register","Specimen":"NOT BX"},
        {"Type":"Memory","Specimen":"NOT [F807H]"}
      ]
    },
    {
      "Instruction": "NOT",
      "Syntax": "NOT destination",
      "Description": "Equivalent to destination = ~destination (‘~’ indicates bitwise NOT operation)",
      "Source": [],
      "Destination": ["Register","Memory"],
      "FlagsChanged": [],
      "Examples": [
        {"Type":"Register","Specimen":"NOT BX"},
        {"Type":"Memory","Specimen":"NOT [F807H]"}
      ]
    },
    {
      "Instruction": "STC",
      "Syntax": "STC ; no operands",
      "Description": "Sets the Carry flag to 1 (true)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Carry"],
      "Examples": [
        {"Type": "None","Specimen":"STC ; sets the carry flag to true"}
      ]
    },
    {
      "Instruction": "STD",
      "Syntax": "STD ; no operands",
      "Description": "Sets the Direction flag to 1 (true)",
      "Source": [],
      "Destination": [],
      "FlagsChanged": ["Direction"],
      "Examples": [
        {"Type": "None","Specimen":"STD ; sets the direction flag to true"}
      ]
    },
    {
      "Instruction": "XCHG",
      "Syntax": "XCHG firstOperand, secondOperand",
      "Description": "Exchanges the contents of firstOperand with that of the secondOperand (swapping)",
      "Source": ["Register","Memory"],
      "Destination": ["Register","Memory"],
      "FlagsChanged": [],
      "Examples": [
        {"Type":"Register-Register","Specimen":"XCHG BX,DX"},
        {"Type":"Memory-Register","Specimen":"XCHG [F807H],AX"}
      ]
    }
  ]
}